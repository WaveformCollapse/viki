#!/usr/bin/env python3

"""
Viki cli
~~~~~~~~

The automation framework

Usage:
    viki h|help
    viki ll|list
    viki r|run <job_name>
    viki c|create <job_name>
    viki o|output <job_name>

Maintainer:
    John Shanahan <shanahan.jrs@gmail.com>

License:
    Apache 2.0
    http://www.apache.org/licenses/LICENSE-2.0
"""

# --- Imports

import argparse
import requests
import sys

import viki


# --- Setup

debug = True


# --- Private funcs

def _usage():
    """ Print viki-cli usage"""
    print('Usage:')
    print('    viki h|help')
    print('    viki ll|list')
    print('    viki r|run <job_name>')
    print('    viki c|create <job_name>')
    print('    viki o|output <job_name>')
    sys.exit()


def _list():
    """
    :return:
    """
    ret = '*!* refactoring *!*'
    return str(ret)


def _run(job_name, job_args=None):
    """
    :param job_name: Name of job to be run
    :param job_args: List of arguments to send with the job to be injected at run time
    :return:
    """
    ret = '*!* refactoring *!*'
    return str(ret)

def _output(job_name):
    """
    :param job_name:
    :return:
    """
    ret = '*!* refactoring *!*'
    return ret

# --- Main

def main(args):
    """ Main """
    message = "Ok"
    success = 1
    host = "localhost"
    port = "5000"

    try:

        # Parse cli arguments
        parser = argparse.ArgumentParser()
        parser.add_argument(
            'command',
            choices=['list', 'run', 'create', 'output'],
            help='Command: [ list|run|create|output ]'
        )
        args = parser.parse_args()
        command = args.command

        # --- Main execution

        if command == 'list':
            # List jobs
            message = str(_list())

        elif command == 'run':
            # Run a job
            job_name = args[2]

            if len(args) > 3:
                job_args = sys.argv[3:]
                message = str(_run(job_name, job_args))
            else:
                message = str(_run(job_name))

        elif command == 'create':
            # Create a new job
            message = "-- Not yet implemented --"
            pass

        elif command == 'output':
            # Show the output of the last run of the specified job
            message = str(_output(args[2]))

        else:
            # 404 Command not found
            _usage()

    except IndexError as error:
        message = str(error)
        success = 0

    # Fin
    print(message)


if __name__ == "__main__":
    print("{name} {version}".format(name=viki.__name__, version=viki.__version__))
    main(sys.argv)
